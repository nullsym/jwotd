#!/usr/bin/env python

import sqlite3
import argparse
import os

###############
# Global vars #
###############
DB_NAME = "/opt/sachiye/data.db"
DB = None
CONN = None

################
# DB Functions #
################
def db_open():
    global DB, CONN
    CONN = sqlite3.connect(DB_NAME)
    DB = CONN.cursor()

def db_close():
    global CONN
    CONN.commit()
    CONN.close()

def db_create():
    if not (os.path.isfile(DB_NAME)):
        print("[INFO] Creating the database")
        conn = sqlite3.connect(DB_NAME)
        DB = conn.cursor()
        DB.execute('''CREATE TABLE WOTD
                (date text, wotd text, definition text)''')
        conn.commit()
        conn.close()
    else:
        print("The DB already exists, silly!")


def db_add(date, wotd, definition):
    db_open()
    # Do not INSERT data for a day that already has entries in the DB
    #TODO: Change logic: Do not insert if this WOTD is the same as the last entered one
    DB.execute("SELECT rowid FROM WOTD WHERE date = (?)", (date,))
    if DB.fetchone() is None:
        print("Inserting '" + date + "' into the DB")
        # An array of tuples is expected by executemany
        my_tuple = [(date, wotd, definition)]
        print(my_tuple)
        DB.executemany('INSERT INTO WOTD VALUES (?, ?, ?)', my_tuple)
    else:
        print("There is already an entry for this date")
    db_close()


def db_delete(date):
    print("Deleting entry to date: " + date)
    db_open()
    DB.execute("DELETE FROM WOTD WHERE date = ?", (date,))
    db_close()


def db_mvdate(olddate, newdate):
    print("Change date " + olddate + " to " + newdate)
    db_open()
    DB.execute("UPDATE WOTD SET date = ? WHERE date = ?", (newdate, olddate))
    db_close()


def db_print():
    db_open()
    print("+---------------------------------------------+")
    print("| Date      | Definition              | WOTD  |")
    print("+---------------------------------------------+")
    for row in DB.execute("SELECT * FROM WOTD ORDER BY date DESC limit 30"):
        print("{:.11} {:.<30.25} {:<.2}".format(row[0], row[2], row[1]))
    db_close()

########
# Main #
########
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Populate the DB")
    parser.add_argument("-a", "--add", nargs=3, help="Add a WOTD to the database")
    parser.add_argument("-d", "--delete", nargs=1, help="Delete the specified range from the database")
    parser.add_argument("-p", "--print", action="store_true", help="Print the data in the database")
    parser.add_argument("--mvdate", nargs=2, help="Change the date for an entry")
    parser.add_argument("--create", action="store_true", help="Create the database")
    args = parser.parse_args()

    if args.print:
        db_print()

    elif args.add:
        db_add(args.add[0], args.add[1], args.add[2])

    elif args.delete:
        db_delete(args.delete[0])

    elif args.create:
        db_create()

    elif args.mvdate:
        db_mvdate(args.mvdate[0], args.mvdate[1])

    else:
        parser.print_help()
